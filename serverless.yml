service: apiCars

provider:
  name: aws
  runtime: python3.8
  stage: ${opt:stage, 'dev'}
  region: eu-central-1
  environment:
    CLIENT_ID:
      Ref: MyCognitoPoolClient
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan 
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: arn:aws:dynamodb:eu-central-1:025388574077:table/Cars
  endpointType: REGIONAL
  apiName: apiCars-${self:provider.stage}
  apiKeys:
    - apiKeyCars-${self:provider.stage}
  usagePlan:
    quota:
      limit: 1000
      offset: 0
      period: DAY
    throttle:
      burstLimit: 200
      rateLimit: 100
functions:
  list:
    handler: list.handler
    events:
      - http:
          path: cars
          method: get
          private: true
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: !Ref MyAuthorizer
  get:
    handler: get.handler
    events:
      - http:
          path: cars/{id}
          method: get
          private: true
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: !Ref MyAuthorizer
  create:
    handler: create.handler
    events:
      - http:
          path: cars
          method: put
          private: true
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: !Ref MyAuthorizer
  edit:
    handler: edit.handler
    events:
      - http:
          path: cars/{id}
          method: post
          private: true
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: !Ref MyAuthorizer
  delete:
    handler: delete.handler
    events:
      - http:
          path: cars
          method: delete
          private: true
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: !Ref MyAuthorizer
  login:
    handler: login.handler
    events:
      - http:
          path: login
          method: post
          private: true
  signup:
    handler: signup.handler
    events:
      - http:
          path: signup
          method: post
          private: true
  confirmsignup:
    handler: confirmsignup.handler
    events:
      - http:
          path: confirmsignup
          method: post
          private: true
resources:
  Resources:
    Cars:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: Cars
        AttributeDefinitions:
          - AttributeName: licenseplate
            AttributeType: S
        KeySchema:
          - AttributeName: licenseplate
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
          
    MyCognitoPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: MyCognitoPool-${self:provider.stage}
        Policies:
          PasswordPolicy:
            MinimumLength: 8
            RequireLowercase: true
            RequireNumbers: true
            RequireSymbols: true
            RequireUppercase: true
            TemporaryPasswordValidityDays: 15
        UsernameAttributes:
          - email
        AutoVerifiedAttributes:
          - email
        EmailVerificationMessage: 'Tu c칩digo de verificaci칩n para MyCarsApp es {####}'
        EmailVerificationSubject: 'Tu c칩digo para MyCarsApp'
        MfaConfiguration: OFF
        UserPoolTags:
          Env: ${self:provider.stage}
        AdminCreateUserConfig:
          AllowAdminCreateUserOnly: false
          InviteMessageTemplate:
            EmailMessage: 'Esta es tu contrase침a para tu cuenta {username} en MyCarsApp: {####}'
            EmailSubject: 'Tu cuenta para MyCarsApp'
        UsernameConfiguration:
          CaseSensitive: false
          
    MyCognitoPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: MyCognitoPoolClient-${self:provider.stage}
        ExplicitAuthFlows:
          - USER_PASSWORD_AUTH
        RefreshTokenValidity: 30
        UserPoolId:
          Ref: MyCognitoPool
    
    MyAuthorizer:
      Type: AWS::ApiGateway::Authorizer
      Properties:
        Name: MyAuthorizer-${self:provider.stage}
        RestApiId:
          Ref: ApiGatewayRestApi
        Type: COGNITO_USER_POOLS
        ProviderARNs:
          - !GetAtt MyCognitoPool.Arn
        IdentitySource: method.request.header.Authorization
